* MINIGUI - Harbour Win32 GUI library 
* Copyright 2021 Sergej Kiselev <bilance@bilance.lv>
****************************************************************************

События в МиниГуи. Краткое описание.


События — это действия или случаи, возникающие в программируемой вами системе, 
о которых система сообщает вам для того, чтобы вы могли с ними взаимодействовать. 
(из википедии)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Под событием в МиниГуи понимаем исполняемый блок кода на нем, т.е.
событие это блок кода, не именованная LOCAL функция, если говорим о своих событиях

События в МиниГуи бывают:
- системные WM_... (их много есть и другие), смотреть функцию обработчик
  \MiniGUI\SOURCE\h_events.prg

- пользовательские, это свой обработчик SET EVENTS TO myEvents, где самстоятельно
  делаем обработку или вставляем в основной обработчик, т.е.
  #define WM_WND_LAUNCH   (WM_USER+1044)
  #define WM_CTL_LAUNCH   (WM_USER+1045)
  #define WM_APP_LAUNCH   (WM_USER+1046)
   ...
   ****************************************************************************
   CASE WM_WND_LAUNCH
   ****************************************************************************
      IF _HMG_lOOPEnabled
         Eval ( _HMG_bOnWndLaunch, hWnd, nMsg, wParam, lParam )
      ENDIF
      EXIT
   ****************************************************************************
   CASE WM_CTL_LAUNCH
   ****************************************************************************
      IF _HMG_lOOPEnabled
         Eval ( _HMG_bOnCtlLaunch, hWnd, nMsg, wParam, lParam )
      ENDIF
      EXIT
      ...

- есть аналоги clipper SET KEY TO ..., которые можно после регистрации исполнять
  в тех или иных случаях (как в clipper нажатия клавиш вызывали исп. ф-ии) 
  это типа свои события


В чем разница между событием и обычными функциями на окне/кнопке/другом объекте ?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Практически ни чем. 
Событие мы регистрируем на окне/объекте, т.е. за номером закрепляем блок кода, 
как в clipper SET KEY TO ... за клавишей закрепляли блок кода или функцию


Что такое событие на кнопке ?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Смотрите i_button.ch (для др. контролов смотри i_<контрол>.ch)
там в DEFINE BUTTON... будут события на кнопке, т.е. ACTION, ON GOTFOCUS,
ON LOSTFOCUS, ON MOUSEHOVER, ...
При выполнении события создается для блока кода среда This кнопки\контрола

Что такое событие на окне ?
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Смотрите i_window.ch
там в DEFINE WINDOW... будут события на окне, т.е. ON INIT, ON GOTFOCUS,
ON LOSTFOCUS, ...
При выполнении события создается для блока кода среда This окна

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Обычное написание/программирование кнопки в МиниГуи 

      @ nY, nX BUTTONEX .....  ;
        ...
        ACTION  {|| MsgInfo("Test button 1"), MsgDebug(This.Name) } 

на окне

      DEFINE WINDOW ...
         ...
         ON INIT {|| ... } ;
         ON RELEASE {|| ... }

Написание для события на кнопку: 

      @ nY, nX BUTTONEX .....  ;
        ...
        ACTION  {|| _wPost(99, , This.Name) } 

на окне

      DEFINE WINDOW ...
       ON INIT    {|| DoEvents(), _wSend(100) } 


Обработчик событий пишется так:

   DEFINE WINDOW ...
         ...

       WITH OBJECT This.Object
          :Event(  0, {|  | wApi_Sleep(200), AlertInfo("Запуск события 0") } )
          :Event( 91, {|  | This.Minimize, wApi_Sleep(200), This.Restore   } )
          :Event( 92, {|  | This.Hide , wApi_Sleep(200), This.Show         } )
          :Event( 99, {|ow| ow:Release()                                   } )
       END WITH
         ...
   END WINDOW

или так:

   DEFINE WINDOW ...
         ...
       (This.Object):Event(  1, {|ow,ky| Label_Left2Right(ky), ky := ow    } )
       (This.Object):Event(  2, {|ow,ky| Label_Left2Right(ky, .T.)         } )
       (This.Object):Event( 99, {|ow   | ow:Release()                      } )
         ...
   END WINDOW


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Активировать (как нажимали клавиши или keyboard в clipper) на выполнение свои 
блоки кода, можно вызывая функции:
   _wPost(NN [, cForm\nIndex [, xParam]]) - без ожидания завершения
   _wSend(NN [, cForm\nIndex [, xParam]]) - ожидание завершения 
где:
   - NN     это номер-события (в clipper клавиши) от 0 до 99999.... max десятичное 
                число
   - cForm  это имя окна\формы, где зарегистрировано событие и This среды этого окна
   - nIndex это индех контрола в hmg, для This среды, выполняемого блока кода
   - xParam это передаваемый параметр (только один, может быть массив) в блок кода


1) _wPost(NN) это команда посылает в очередь Windows и переходит на следующую команду

   {|| DoEvents(), _wPost(NN) } - означает выполнение из очереди "условно" всех 
                                  событий и посылка в очередь события NN

2) _wSend(NN) это команда с ожиданием завершения (выполнило НОМЕР-СОБЫТИЯ и пошла дальше)
   {|| _wSend(NN) }


Пример события на кнопке:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Ставим событие (среда This в блоке кода будет для кнопки или окна):

      @ nY, nX BUTTONEX .....  ;
        ...
        ACTION  {|| _wPost(This.Cargo:nPost)             } // This окна
или
        ACTION  {|| _wPost(This.Cargo:nPost, This.Index) } // This кнопки\контрола
или
        ACTION  {|| _wPost(This.Cargo:nPost, This.Name)  } // This окна This.Name

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Есть еще 3-ий параметр, который передается в блок кода, т.е.
1)  _wPost( This.Cargo:nPost,           , {This.Name, This.Index, This.Cargo} ) 
2)  _wPost( This.Cargo:nPost, This.Index, {This.Name, This.Cargo} ) 
3)  _wPost( This.Cargo:nPost, This.Name , "bla_bla_bla" ) 
к командам _Send(...) это относится аналогично.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Т.е. существует 4 типа написания события:
1)  _wPost(This.Cargo:nPost)             // 2-ой парам. := _HMG_ThisFormName
                                         // если так пишем в событиях окна, или
                                         // для контрола, если так пишем в его событиях 
                                         // в событии будет This среда окна всегда

2)  _wPost(This.Cargo:nPost, This.Index) // только для контрола, задан его индекс

3)  _wPost(This.Cargo:nPost, This.Name)  // только для окна, т.к. задаем имя окна,
                                         // имя может быть любым существующим окном,
                                         // например oMain:Name, тогда вызывается
                                         // событие этого окна, если оно есть
                                         // В контроле - это ошибка, т.к. имя ищем
                                         // в списке окон
4)  _wPost(This.Cargo:nPost, ThisWindow.Name)  // только для окна, т.к. задаем имя окна
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Рассмотрим более подробней:


1) просто событие
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Под событием понимаем исполняемый блок кода на нем, а в блоке кода важно какая
среда This ставится для окна или для конотрола (это главное правило minigui)
По умолчанию берется _HMG_ThisFormName или ThisWindow.Name, т.е. если задавать
2-й параметр, то надо писать ThisWindow.Name для This окна или This.Index для
контрола. Для вызова события другого окна задаем имя этого окна (окно должно 
быть), т.е. oMain:Name - вызываем событие окна MAIN. В WM_COPYDATA можно для 
обработки исп. события окна MAIN, т.е. так получив данные с идентификатором
делаем DoEvents(), _wPost(555, oMain:Name, {nId, cBuf}) освобождаем главный 
обработчик.


2) в событии будет среда This для кнопки, т.к. задан This.Index параметр 2
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Да, в блоке кода будет создана среда This для контрола, в данном случае кнопки.
т.е. переменные hmg

      _HMG_ThisFormIndex   := <окно index>
      _HMG_ThisType        := 'C'              // 'C[ontrol]' признак
      _HMG_ThisIndex       := <контрол index>
      _HMG_ThisFormName    := <окно name>
      _HMG_ThisControlName := <контрол name>

в событии (This контрола) работаем 
  :Events(777, {|oс,ky,ap|
                 Local cForm  := ThisWindow.Name     // окно
                 Local oWnd   := ThisWindow.Object   // окно
                 Local cWnd   := oWnd:Name           // окно
                 Local nInd   := oWnd:Index          // окно
                 Local cName  := This.Name           // контрол
                 Local nIndex := This.Index          // контрол
                 Local cTip   := This.Type           // контрол
                 ? ky, ap, "Window =", cForm, cWnd, nInd, cTip, cName, nIndex
                 ?? "Это :", iif( cTip == "W", "Окно", "Контрол" )
                 ...
                 Return Nil
               })


3) в событии будет среда This ОКНА, т.к. задан This.Name параметр 2
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This.Name или ThisWindow.Name (можно делать в контроле) будет создавать
в блоке кода среду окна, т.е. переменные hmg     

      _HMG_ThisFormIndex   := <окно index>
      _HMG_ThisEventType   := ''
      _HMG_ThisType        := 'W'              // 'W[indow]' признак
      _HMG_ThisIndex       := <окно index>
      _HMG_ThisFormName    := <окно name>
      _HMG_ThisControlName := ""

в событии (This окна) работаем
  :Events(777, {|ow,ky,ap|
                 Local cForm  := ThisWindow.Name     // окно
                 Local cWnd   := ow:Name             // окно
                 Local nInd   := ow:Index            // окно
                 Local cName  := This.Name           // окно
                 Local nIndex := This.Index          // окно
                 Local cTip   := This.Type           // окно
                 ? ky, ap, "Window =", cForm, cWnd, nInd, cTip, cName, nIndex
                 ?? "Это :", iif( cTip == "W", "Окно", "Контрол" )
                 ...
                 Return Nil
               })

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
В качестве примера смотрите 
    \MiniGUI\SAMPLES\Advanced\APP_OBJECTS
    \MiniGUI\SAMPLES\Advanced\APP_OOPCOLUMNS
    \MiniGUI\SAMPLES\Advanced\APP_OOPEVENTS
    \MiniGUI\SAMPLES\Advanced\APP_OOPGETBOX
    \MiniGUI\SAMPLES\Advanced\APP_OOPREPORT
    \MiniGUI\SAMPLES\Advanced\APP_OOPTSBBOX
или 
    \MiniGUI\SAMPLES\Advanced\Tsb_5Win
