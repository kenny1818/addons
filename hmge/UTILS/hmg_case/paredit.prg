/*----
 * This program is generated by HMGCASE
 * developed by Dragan Cizmarevic < dragancesu(at)gmail.com > 
 */

#include <hmg.ch>

PROCEDURE par_edit

   PUBLIC NewRec := .F., EditRec := .F.,  FindRec := .F., FiltRec := .F., _qry_exp := ""

   set navigation extended    // for test  
   set deleted on             // for test  

   set date german            // for test  
   set century on             // for test  

   open_1701() 

   DEFINE WINDOW Win_par ;
      AT 0,0 ;
      WIDTH 1000 ;
      HEIGHT 700 ;
      TITLE "Report parameters" ;
      MODAL ;
      ON RELEASE dbcloseall() ;
      BACKCOLOR { 230, 230, 230 }

      ON KEY ESCAPE ACTION CancelEdit_1701() 

      *ON KEY F2   ACTION ( FiltRec := .T., Find_1701())
      ON KEY F4   ACTION ( FiltRec := .F., EditRec := .T., NewRec := .F., If ( RecordStatus_1701(), EnableField_1701(), Nil ))
      ON KEY F6   ACTION ( FiltRec := .F., NewRec := .T., EditRec = .F., NewRecord_1701() )
      ON KEY F8   ACTION ( FiltRec := .F., RecordStatus_1701(), DeleteRecord_1701(), Nil )
      ON KEY F9   ACTION par_build()
      ON KEY F10  ACTION Win_par.Release

      DEFINE STATUSBAR FONT "Arial" SIZE 12
         STATUSITEM "Parameters"
      END STATUSBAR

      DEFINE TOOLBAR ToolBar_1 BUTTONSIZE 50,50 IMAGESIZE 24,24 FLAT BORDER

      *BUTTON FIND_1701 ;
      *   CAPTION "[F2] Find" ;
      *   PICTURE "edit_find" ;
      *   ACTION ( FiltRec := .T., Find_1701())

      BUTTON EDIT_1701 ;
         CAPTION "[F4] Edit" ;
         PICTURE "edit_edit" ;
         ACTION ( FiltRec := .F., EditRec := .T., NewRec := .F., If ( RecordStatus_1701(), EnableField_1701(), Nil ))

      BUTTON NEW_1701 ;
         CAPTION "[F6] New" ;
         PICTURE "edit_new" ;
         ACTION ( FiltRec := .F., NewRec := .T., EditRec = .F., NewRecord_1701() )

      BUTTON DELETE_1701 ;
         CAPTION "[F8] Delete" ;
         PICTURE "edit_delete" ;
         ACTION ( FiltRec := .F., RecordStatus_1701(), DeleteRecord_1701(), Nil )

      BUTTON PRINT_1701 ;
         CAPTION "[F9] Build" ;
         PICTURE "frm_build" ;
         ACTION par_build()

      BUTTON EXIT_1701 ;
         CAPTION "[F10] Exit" ;
         PICTURE "edit_close" ;
         ACTION Win_par.Release

      // add users functions in Toolbar 
      /*
      BUTTON FN1_1701 ;
         CAPTION "Fn(1)" ;
         PICTURE "edit_fn" ;
         ACTION nil

      BUTTON FN2_1701 ;
         CAPTION "Fn(2)" ;
         PICTURE "edit_fn" ;
         ACTION nil

      BUTTON FN3_1701 ;
         CAPTION "Fn(3)" ;
         PICTURE "edit_fn" ;
         ACTION nil
      */

      END TOOLBAR

      PaintDisplay_1701()

      @ 65, 10 LABEL   lFILTER VALUE "FILTER" WIDTH 55 
      @ 64, 70 TEXTBOX mFILTER WIDTH 600 

      @ 90, 10 BROWSE Browse_1 ;
         OF Win_par ;
         WIDTH 350 ;
         HEIGHT 450 ;
         FONT "Arial" ; 
         SIZE 10 ;
         HEADERS { "REPORT","NO","LABEL","TEXTBOX","TYPE","DEFAULT","WIDTH","FORMAT" } ;
         WIDTHS { 150,50,150,160,50,160,60,160 } ;
         WORKAREA _param ;
         FIELDS { "REPORT","NOO","LABEL","TEXTBOX","TYPE","DEFAULT","WIDTH","FORMAT" } ;
         ON CHANGE LoadData_1701() ;
         ON DBLCLICK ( EnableField_1701(), If ( ! RecordStatus_1701(), DisableField_1701(), Nil ) ) ;
         JUSTIFY { , BROWSE_JTFY_RIGHT, , , , , BROWSE_JTFY_RIGHT, , } 

      @ 580, 50 BUTTON SAVE_1701 ;
         CAPTION "Save" ;
         PICTURE "ok" RIGHT ;
         ACTION SaveRecord_1701() ;
         WIDTH 100 ;
         HEIGHT 40 

      @ 580, 300 BUTTON QUERY_1701 ;
         CAPTION "Query" ;
         PICTURE "edit_find" RIGHT ;
         ACTION QueryRecord_1701() ;
         WIDTH 100 ;
         HEIGHT 40 

      @ 60, 700 BUTTON  FILTER_1701 ;
         CAPTION "Filter" ;
         ACTION DoFilter_1701() ;
         WIDTH 80 ;
         HEIGHT 30 

      @ 580, 150 BUTTON CANCEL_1701 ;
         CAPTION "Cancel" ;
         PICTURE "cancel" RIGHT ;
         ACTION CancelEdit_1701() ;
         WIDTH 100 ;
         HEIGHT 40 

   END WINDOW

   DisableField_1701()

   Win_par.Browse_1.SetFocus
   Win_par.Browse_1.Value := _param->(RecNo())

   ACTIVATE WINDOW Win_par

RETURN
*:---------------------------------------------*
FUNCTION open_1701()

   par_init()

   Use_param()

RETURN
*:---------------------------------------------*
FUNCTION par_build ()

   par_gen()
   Win_par.Release

RETURN
*:-----------------------------------
PROCEDURE DisableField_1701

   Win_par.Browse_1.Enabled      := .T.
   Win_par.Query_1701.Visible    := .F.

   Win_par.mREPORT.Enabled       := .F.
   Win_par.mNO.Enabled           := .F.
   Win_par.mLABEL.Enabled        := .F.
   Win_par.mTEXTBOX.Enabled      := .F.
   Win_par.mTYPE.Enabled         := .F.
   Win_par.mDEFAULT.Enabled      := .F.
   Win_par.mWIDTH.Enabled        := .F.
   Win_par.mFORMAT.Enabled       := .F.

   If !FiltRec 
      Win_par.lFILTER.Visible     := .F.
      Win_par.mFILTER.Visible     := .F.
      Win_par.FILTER_1701.Visible := .F.
   Endif

   Win_par.Save_1701.Enabled     := .F.
   Win_par.Cancel_1701.Enabled   := .F.
   Win_par.Query_1701.Enabled    := .F.
   Win_par.Toolbar_1.Enabled     := .T.
   Win_par.Browse_1.SetFocus

RETURN
*:---------------------------------------------*
PROCEDURE EnableField_1701

   Win_par.Browse_1.Enabled      := .F.

   Win_par.mREPORT.Enabled       := .T.
   Win_par.mNO.Enabled           := .T.
   Win_par.mLABEL.Enabled        := .T.
   Win_par.mTEXTBOX.Enabled      := .T.
   Win_par.mTYPE.Enabled         := .T.
   Win_par.mDEFAULT.Enabled      := .T.
   Win_par.mWIDTH.Enabled        := .T.
   Win_par.mFORMAT.Enabled       := .T.

   If FiltRec 
      Win_par.lFILTER.Visible     := .T.
      Win_par.mFILTER.Visible     := .T.
      Win_par.FILTER_1701.Visible := .T.
   Else 
      Win_par.lFILTER.Visible     := .F.
      Win_par.mFILTER.Visible     := .F.
      Win_par.FILTER_1701.Visible := .F.

      Win_par.lFILTER.Enabled     := .F.
      Win_par.mFILTER.Enabled     := .F.
      Win_par.FILTER_1701.Enabled := .F.

      IF !empty ( Win_par.mFILTER.Value )
         Win_par.mFILTER.Visible  := .T.
      Endif

   Endif 

   Win_par.Save_1701.Enabled     := .T.
   Win_par.Cancel_1701.Enabled   := .T.
   Win_par.Query_1701.Enabled    := .F.
   Win_par.Toolbar_1.Enabled     := .F.
   Win_par.mNO.SetFocus

RETURN
*:---------------------------------------------*
FUNCTION RecordStatus_1701()

   Local RetVal

   _param->( dbGoTo ( Win_par.Browse_1.Value ) )

   IF _param->(RLock())
      RetVal := .T.
   ELSE
      MsgExclamation ("Record LOCKED, try again later")
      RetVal := .F.
   ENDIF

RETURN RetVal
*:---------------------------------------------*
PROCEDURE LoadData_1701

   _param->( dbGoTo ( Win_par.Browse_1.Value ) )

   Win_par.mREPORT.Value       := _param->REPORT    
   Win_par.mNO.Value           := _param->NOo        
   Win_par.mLABEL.Value        := _param->LABEL     
   Win_par.mTEXTBOX.Value      := _param->TEXTBOX   
   Win_par.mTYPE.Value         := _param->TYPE      
   Win_par.mDEFAULT.Value      := _param->DEFAULT   
   Win_par.mWIDTH.Value        := _param->WIDTH     
   Win_par.mFORMAT.Value       := _param->FORMAT    

RETURN
*:---------------------------------------------*
PROCEDURE CancelEdit_1701

   DisableField_1701()
   LoadData_1701()
   UNLOCK
   NewRec := .F.
   Win_par.Browse_1.SetFocus

RETURN
*:---------------------------------------------*
PROCEDURE SaveRecord_1701

   Local NewRecNo

   DisableField_1701()

   IF NewRec == .T.
      _param->(dbAppend())
      NewRec := .F.
   ELSE
      _param->(dbGoto ( Win_par.Browse_1.Value ) )
   ENDIF

   NewRecNo := _param->( RecNo() )

   _param->REPORT     := Win_par.mREPORT.Value
   _param->NOo         := Win_par.mNO.Value
   _param->LABEL      := Win_par.mLABEL.Value
   _param->TEXTBOX    := Win_par.mTEXTBOX.Value
   _param->TYPE       := Win_par.mTYPE.Value
   _param->DEFAULT    := Win_par.mDEFAULT.Value
   _param->WIDTH      := Win_par.mWIDTH.Value
   _param->FORMAT     := Win_par.mFORMAT.Value

   Win_par.Browse_1.Refresh
   IF NewRec == .T.
      Win_par.Browse_1.Value := NewRecNo 
   ENDIF

   UNLOCK
   dbCommitall()

   Win_par.StatusBar.Item(1) := "Save Record" 

RETURN
*:---------------------------------------------*
PROCEDURE NewRecord_1701

   Win_par.StatusBar.Item(1) := "Inserting" 

   SET ORDER TO 1
   dbGoBottom()

   Win_par.mREPORT.Value       := "form1"
   Win_par.mNO.Value           := 0
   Win_par.mLABEL.Value        := "form"
   Win_par.mTEXTBOX.Value    := "form"
   Win_par.mTYPE.Value         := "n"
   Win_par.mDEFAULT.Value      := "0"
   Win_par.mWIDTH.Value        := 0
   Win_par.mFORMAT.Value       := ""

   EnableField_1701()

   Win_par.mREPORT.SetFocus

RETURN
*:---------------------------------------------*
PROCEDURE DeleteRecord_1701

   IF MsgYesNo ( "Are you sure do you want delete record?" )
      IF _param->(FLock())
         DELETE
         Win_par.Browse_1.Refresh
         UNLOCK
      ENDIF
   ENDIF

RETURN
*:---------------------------------------------*
PROCEDURE Find_1701

   FindRec := .T. 
   Win_par.mFILTER.Value := space(60)

   Win_par.StatusBar.Item(1)  := "Query" 
   Win_par.Query_1701.Visible := .T.

   Win_par.mREPORT.Value      := ""
   Win_par.mNO.Value          := 0
   Win_par.mLABEL.Value       := ""
   Win_par.mTEXTBOX.Value     := ""
   Win_par.mTYPE.Value        := ""
   Win_par.mDEFAULT.Value     := ""
   Win_par.mWIDTH.Value       := 0
   Win_par.mFORMAT.Value      := ""

   EnableField_1701()
   Win_par.Save_1701.Enabled  := .F.
   Win_par.Query_1701.Enabled := .T.
   Win_par.mREPORT.SetFocus

RETURN
*:---------------------------------------------*
PROCEDURE PrintData_1701

   Local RecRec 

   RecRec := _param->( RecNo())
   dbGoTop()
   DO REPORT ;
      TITLE "_param" ;
      HEADERS { "","","","","","","","" }, { "REPORT","NO","LABEL","TEXTBOX","TYPE","DEFAULT","WIDTH","FORMAT" } ;
      FIELDS { "REPORT","NO","LABEL","TEXTBOX","TYPE","DEFAULT","WIDTH","FORMAT" } ;
      WIDTHS { 16,3,16,16,5,16,6,16 } ;
      TOTALS { .F.,.F.,.F.,.F.,.F.,.F.,.F.,.F. } ;
      WORKAREA _param ;
      LPP 50 ;
      CPL 80 ;
      LMARGIN 5 ;
      PREVIEW
   _param->(dbGoTo(RecRec))

RETURN
*:---------------------------------------------*
PROCEDURE PaintDisplay_1701

   @ 100, 420 LABEL Label_1 VALUE "REPORT" TRANSPARENT 
   @ 130, 420 LABEL Label_2 VALUE "NO" TRANSPARENT 
   @ 160, 420 LABEL Label_3 VALUE "LABEL" TRANSPARENT 
   @ 190, 420 LABEL Label_4 VALUE "TEXTBOX" TRANSPARENT 
   @ 220, 420 LABEL Label_5 VALUE "TYPE" TRANSPARENT 
   @ 250, 420 LABEL Label_6 VALUE "DEFAULT" TRANSPARENT 
   @ 280, 420 LABEL Label_7 VALUE "WIDTH" TRANSPARENT 
   @ 310, 420 LABEL Label_8 VALUE "FORMAT" TRANSPARENT 

   @ 100, 520 TEXTBOX  mREPORT      WIDTH 150 UPPERCASE 
   @ 130, 520 TEXTBOX  mNO          WIDTH 20 NUMERIC INPUTMASK "99"
   @ 160, 520 TEXTBOX  mLABEL       WIDTH 150 UPPERCASE 
   @ 190, 520 TEXTBOX  mTEXTBOX     WIDTH 150 UPPERCASE 
   @ 220, 520 TEXTBOX  mTYPE        WIDTH 20 UPPERCASE 
   @ 250, 520 TEXTBOX  mDEFAULT     WIDTH 150 UPPERCASE 
   @ 280, 520 TEXTBOX  mWIDTH       WIDTH 30 NUMERIC INPUTMASK "999"
   @ 310, 520 TEXTBOX  mFORMAT      WIDTH 150 UPPERCASE 

RETURN
*:---------------------------------------------*
PROCEDURE Head1_1701

   SELECT _param
   SET ORDER TO 1
   dbGotop()
   Win_par.Browse_1.Value := RecNo()
   Win_par.Browse_1.Refresh
   LoadData_1701()

RETURN
*:---------------------------------------------*
PROCEDURE Head2_1701

   SELECT _param
   SET ORDER TO 2
   dbGotop()
   Win_par.Browse_1.Value := RecNo()
   Win_par.Browse_1.Refresh
   LoadData_1701()

RETURN
*:---------------------------------------------*
PROCEDURE QueryRecord_1701

   PreQuery_1701()

   Win_par.lFILTER.Visible     := .T. 
   Win_par.mFILTER.Visible     := .T. 
   Win_par.FILTER_1701.Visible := .T. 

   Win_par.lFILTER.Enabled     := .T. 
   Win_par.mFILTER.Enabled     := .T. 
   Win_par.FILTER_1701.Enabled := .T. 

   Win_par.mFILTER.Value := _qry_exp 

   SET FILTER TO &_qry_exp
   dbGotop()

   IF ! EMPTY( _qry_exp )
      COUNT TO found_rec FOR &_qry_exp
      dbGotop()

      IF found_rec = 0
         Win_par.Statusbar.Item(1) := "Not found!"
      ELSE
         Win_par.Statusbar.Item(1) := "Found " + ALLTRIM(STR(found_rec)) + " record(s)!"
      ENDIF
   ENDIF

   DisableField_1701()

   Win_par.Browse_1.Refresh
   Win_par.Browse_1.Enabled   := .T.

RETURN
*:---------------------------------------------*
PROCEDURE PreQuery_1701

_qry_exp := ""
_ima_filter := .F.
FiltRec := .T.

sREPORT := Win_par.mREPORT.Value
IF ! EMPTY ( sREPORT )     // REPORT
   IF _ima_filter
      _qry_exp = _qry_exp + " .AND. "
   ENDIF
   IF AT ( "%", sREPORT ) > 0
      sREPORT = strtran( sREPORT, "%","" )
      _qry_exp = _qry_exp + "IF(AT('" + sREPORT + "', REPORT)>0,.T.,.F.)"
   ELSE
      _qry_exp = _qry_exp + "REPORT = " + chr(34) + Win_par.mREPORT.Value + chr(34)
   ENDIF
   _ima_filter := .T.
ENDIF

IF ! EMPTY ( Win_par.mNO.Value )     // NO
   IF _ima_filter
      _qry_exp = _qry_exp + " .AND. "
   ENDIF
      _qry_exp = _qry_exp + "NO = " + STR( Win_par.mNO.Value )
      _ima_filter := .T.
ENDIF

sLABEL := Win_par.mLABEL.Value
IF ! EMPTY ( sLABEL )     // LABEL
   IF _ima_filter
      _qry_exp = _qry_exp + " .AND. "
   ENDIF
   IF AT ( "%", sLABEL ) > 0
      sLABEL = strtran( sLABEL, "%","" )
      _qry_exp = _qry_exp + "IF(AT('" + sLABEL + "', LABEL)>0,.T.,.F.)"
   ELSE
      _qry_exp = _qry_exp + "LABEL = " + chr(34) + Win_par.mLABEL.Value + chr(34)
   ENDIF
   _ima_filter := .T.
ENDIF

sTEXTBOX := Win_par.mTEXTBOX.Value
IF ! EMPTY ( sTEXTBOX )     // TEXTBOX
   IF _ima_filter
      _qry_exp = _qry_exp + " .AND. "
   ENDIF
   IF AT ( "%", sTEXTBOX ) > 0
      sTEXTBOX = strtran( sTEXTBOX, "%","" )
      _qry_exp = _qry_exp + "IF(AT('" + sTEXTBOX + "', TEXTBOX)>0,.T.,.F.)"
   ELSE
      _qry_exp = _qry_exp + "TEXTBOX = " + chr(34) + Win_par.mTEXTBOX.Value + chr(34)
   ENDIF
   _ima_filter := .T.
ENDIF

sTYPE := Win_par.mTYPE.Value
IF ! EMPTY ( sTYPE )     // TYPE
   IF _ima_filter
      _qry_exp = _qry_exp + " .AND. "
   ENDIF
   IF AT ( "%", sTYPE ) > 0
      sTYPE = strtran( sTYPE, "%","" )
      _qry_exp = _qry_exp + "IF(AT('" + sTYPE + "', TYPE)>0,.T.,.F.)"
   ELSE
      _qry_exp = _qry_exp + "TYPE = " + chr(34) + Win_par.mTYPE.Value + chr(34)
   ENDIF
   _ima_filter := .T.
ENDIF

sDEFAULT := Win_par.mDEFAULT.Value
IF ! EMPTY ( sDEFAULT )     // DEFAULT
   IF _ima_filter
      _qry_exp = _qry_exp + " .AND. "
   ENDIF
   IF AT ( "%", sDEFAULT ) > 0
      sDEFAULT = strtran( sDEFAULT, "%","" )
      _qry_exp = _qry_exp + "IF(AT('" + sDEFAULT + "', DEFAULT)>0,.T.,.F.)"
   ELSE
      _qry_exp = _qry_exp + "DEFAULT = " + chr(34) + Win_par.mDEFAULT.Value + chr(34)
   ENDIF
   _ima_filter := .T.
ENDIF

IF ! EMPTY ( Win_par.mWIDTH.Value )     // WIDTH
   IF _ima_filter
      _qry_exp = _qry_exp + " .AND. "
   ENDIF
      _qry_exp = _qry_exp + "WIDTH = " + STR( Win_par.mWIDTH.Value )
      _ima_filter := .T.
ENDIF

sFORMAT := Win_par.mFORMAT.Value
IF ! EMPTY ( sFORMAT )     // FORMAT
   IF _ima_filter
      _qry_exp = _qry_exp + " .AND. "
   ENDIF
   IF AT ( "%", sFORMAT ) > 0
      sFORMAT = strtran( sFORMAT, "%","" )
      _qry_exp = _qry_exp + "IF(AT('" + sFORMAT + "', FORMAT)>0,.T.,.F.)"
   ELSE
      _qry_exp = _qry_exp + "FORMAT = " + chr(34) + Win_par.mFORMAT.Value + chr(34)
   ENDIF
   _ima_filter := .T.
ENDIF

RETURN
*:*********************************
PROCEDURE DoFilter_1701

   _qry_exp := Win_par.mFILTER.Value 

   SET FILTER TO &_qry_exp
   dbGotop()

   IF ! EMPTY( _qry_exp )
      COUNT TO found_rec FOR &_qry_exp
      dbGotop()

      IF found_rec = 0
         Win_par.Statusbar.Item(1) := "Not found!"
      ELSE
         Win_par.Statusbar.Item(1) := "Found " + ALLTRIM(STR(found_rec)) + " record(s)!"
      ENDIF
   ENDIF

   DisableField_1701() 

   Win_par.Browse_1.Refresh 
   Win_par.Browse_1.Enabled := .T. 

RETURN
*:*********************************
FUNCTION par_init

LOCAL alist_fld

if ! file ("_param.dbf")
   alist_fld := {} 
   aadd(alist_fld,{"REPORT","C",15,0})
   aadd(alist_fld,{"NOo","N",2,0})
   aadd(alist_fld,{"LABEL","C",15,0})
   aadd(alist_fld,{"TEXTBOX","C",15,0})
   aadd(alist_fld,{"TYPE","C",1,0})
   aadd(alist_fld,{"DEFAULT","C",15,0})
   aadd(alist_fld,{"WIDTH","N",3,0})
   aadd(alist_fld,{"FORMAT","C",15,0})
   dbcreate("_param",alist_fld)
endif

if ! file ("_param.ntx")
   use _param
   index on REPORT+STR(NOo,2) to _param
   use 
endif

if ! file ("_paramu.ntx")
   use _param
   index on REPORT to _paramu UNIQUE
   use 
endif

RETURN 
*:----------------------------------------------
function use_param

   Use _param index _param, _paramu

return
*:------------------------------------------------
Function Par_GEN() 		

dbcloseall()
par_init()
use_param()

set procedure to paredit

if reccount() = 0
   use
   msginfo('Nothing, first create parameters')
   return 
endif

	DEFINE WINDOW ParGenForm ;
		AT 0,0 ;
		WIDTH 400 ;  
		HEIGHT 300 ;
		TITLE 'Generate Parameter form' ;
		MODAL ;      
		ON INIT OpenTablesP1()
	
        ON KEY ESCAPE ACTION ParGenForm.Release
   
		@ 010,010 COMBOBOX Combo_1 ;
			ITEMSOURCE _PARAM->REPORT ;
			VALUE 1 ;
			WIDTH 200 HEIGHT 100 ;
			FONT "Arial" SIZE 10 ; 
			TOOLTIP "Form" 

	    @ 150, 150 BUTTON REPORT_111 ; 
            CAPTION " Create Form " ;
		    WIDTH 100 ;
		    ACTION par_genn() 

	END WINDOW		 

	CENTER WINDOW   ParGenForm
	ACTIVATE WINDOW ParGenForm

Return
*:------------------------------
Function OpenTablesP1

use_param()
set order to 2
dbgotop()

Return
*:-------------------------------
function par_genn ( i ) 

_key := ParGenForm.Combo_1.Value

dbcloseall()

use_param()
go _key

_report := alltrim(report)

tek_red = 0
_red = 50

set filter to report = _report
dbgotop()

set device to printer
set printer to param.prg

tek_red++
@ tek_red, 0 say '*** defaults '
tek_red++

do while .not. eof()

if type = 'N'
   _red1 = '_' + lower(alltrim(textbox)) + ' = ' + alltrim(str(val(default)))
endif

if type = 'C'
   _red1 = '_' + lower(alltrim(textbox)) + ' = "' + alltrim(default) + '"'
endif

if type = 'D'
   _red1 = '_' + lower(alltrim(textbox)) + ' = date()'
endif


tek_red++
@ tek_red, 0 say _red1

dbskip()
enddo

tek_red++
tek_red++
@ tek_red, 0 say '*** label & textbox '
tek_red++

dbgotop()
do while .not. eof()

_width = width

_red1 = '@ ' + alltrim(str(_red)) + ', 100 LABEL label_' + alltrim(str(recno())) + ' VALUE "' + alltrim(label) + '"'

_red2 = '@ ' + alltrim(str(_red)) + ', 150 TEXTBOX p' + alltrim(textbox) + ' VALUE _' +  alltrim(lower(textbox)) 

if type = 'D' .and. _width = 0
   _width = 80
endif

if _width > 0
   _red2 = _red2 + ' WIDTH ' + alltrim(str(_width))
endif

if type = 'N'
   _red2 = _red2 + ' NUMERIC'
   if !empty(format)
      _red2 = _red2 + ' INPUTMASK "' + alltrim(format) + '"'
   endif
endif

if type = 'D'
   _red2 = _red2 + ' DATE'
endif


tek_red++
@ tek_red, 0 say _red1
tek_red++
@ tek_red, 0 say _red2
tek_red++

_red = _red + 30

dbskip()
enddo

set printer to
set device to screen
setprc(0,0)

dbcloseall()

msginfo('Create param.prg')

ParGenForm.Release

return 
